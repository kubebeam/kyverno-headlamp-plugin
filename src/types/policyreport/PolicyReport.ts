/**
 *
 *
 *
 * The version of the OpenAPI document:
 * Contact Email:
 * License:
 *
 * NOTE: This file is auto generated by crdtotypes (https://github.com/yaacov/crdtoapi/).
 * https://github.com/yaacov/crdtoapi/README.crdtotypes
 */

import { ObjectMeta } from '../ObjectMeta';
import { PolicyReportResults } from './PolicyReportResults';
import { PolicyReportScope } from './PolicyReportScope';
import { PolicyReportScopeSelector } from './PolicyReportScopeSelector';
import { PolicyReportSummary } from './PolicyReportSummary';

/**
 * PolicyReport is the Schema for the policyreports API
 *
 * @export
 */
export interface PolicyReport {
  /** apiVersion
   * APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @required {true}
   */
  apiVersion: string;
  /** kind
   * Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @required {true}
   */
  kind: string;
  /** metadata
   *
   * @required {false}
   * @originalType {PolicyReportMetadata}
   */
  metadata: ObjectMeta;
  /** results
   * PolicyReportResult provides the result for an individual policy
   *
   * @required {false}
   */
  results?: PolicyReportResults[];
  /** scope
   * Scope is an optional reference to the report scope (e.g. a Deployment, Namespace, or Node)
   *
   * @required {false}
   */
  scope?: PolicyReportScope;
  /** scopeSelector
   * ScopeSelector is an optional selector for multiple scopes (e.g. Pods).
Either one of, or none of, but not both of, Scope or ScopeSelector should be specified.
   *
   * @required {false}
   */
  scopeSelector?: PolicyReportScopeSelector;
  /** summary
   * PolicyReportSummary provides a summary of results
   *
   * @required {false}
   */
  summary?: PolicyReportSummary;
}
