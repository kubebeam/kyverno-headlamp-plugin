/**
 * 
 * 
 *
 * The version of the OpenAPI document: 
 * Contact Email: 
 * License: 
 *
 * NOTE: This file is auto generated by crdtotypes (https://github.com/yaacov/crdtoapi/).
 * https://github.com/yaacov/crdtoapi/README.crdtotypes
 */

import { PolicyReportResultsResourceSelector } from './PolicyReportResultsResourceSelector';
import { PolicyReportResultsResources } from './PolicyReportResultsResources';
import { PolicyReportResultsTimestamp } from './PolicyReportResultsTimestamp';

/**
 * PolicyReportResult provides the result for an individual policy
 *
 * @export
 */
export interface PolicyReportResults {
  /** category
   * Category indicates policy category
   *
   * @required {false}
   */
  category?: string;
  /** message
   * Description is a short user friendly message for the policy rule
   *
   * @required {false}
   */
  message?: string;
  /** policy
   * Policy is the name or identifier of the policy
   *
   * @required {true}
   */
  policy: string;
  /** properties
   * Properties provides additional information for the policy rule
   *
   * @required {false}
   * @originalType {PolicyReportResultsProperties}
   */
  properties?: {[key: string]: string};
  /** resourceSelector
   * SubjectSelector is an optional label selector for checked Kubernetes resources.
For example, a policy result may apply to all pods that match a label.
Either a Subject or a SubjectSelector can be specified.
If neither are provided, the result is assumed to be for the policy report scope.
   *
   * @required {false}
   */
  resourceSelector?: PolicyReportResultsResourceSelector;
  /** resources
   * ObjectReference contains enough information to let you inspect or modify the referred object.
---
New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.
 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.
 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular
    restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".
    Those cannot be well described when embedded.
 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.
 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity
    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple
    and the version of the actual struct is irrelevant.
 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type
    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.


Instead of using this type, create a locally provided and used type that is well-focused on your reference.
For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
   *
   * @required {false}
   */
  resources?: PolicyReportResultsResources[];
  /** result
   * Result indicates the outcome of the policy rule execution
   *
   * @required {false}
   * @originalType {string}
   */
  result?: 'pass' | 'fail' | 'warn' | 'error' | 'skip';
  /** rule
   * Rule is the name or identifier of the rule within the policy
   *
   * @required {false}
   */
  rule?: string;
  /** scored
   * Scored indicates if this result is scored
   *
   * @required {false}
   */
  scored?: boolean;
  /** severity
   * Severity indicates policy check result criticality
   *
   * @required {false}
   * @originalType {string}
   */
  severity?: 'critical' | 'high' | 'low' | 'medium' | 'info';
  /** source
   * Source is an identifier for the policy engine that manages this report
   *
   * @required {false}
   */
  source?: string;
  /** timestamp
   * Timestamp indicates the time the result was found
   *
   * @required {false}
   */
  timestamp?: PolicyReportResultsTimestamp;
}
